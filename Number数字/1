
基本数据类型:<<number>>
 number类型： 正数、负数、0、小数、NaN、 Infinity 、 -Infinity
 1) NaN
 -->> NaN (Not a Number) 不是一个有效的数字字符，但是他属于number类型 console.log(typeof NaN)--->> 'number'
 -->> NaN == NaN  NaN===NaN ==>> false 是不相等的，因为除了数字代表其他任何东西

 NaN的特点：
    A： 任何和NaN操作的都会返回NaN  NaN/10
    B： NaN和任何值都不相等，包括本身 (NaN==NaN)
    C： NaN是number类型的 typeof NaN --<< number

 2) isNaN()  检测一个值是否是有效的数字，如果是的话返回false，不是的话返回true,
    检测机制： 如果值是number直接判断，如果不是的话，首先浏览器默认调用Number()函数,强制转为数字，在进行判断
     console.log(isNaN(12))
     console.log(isNaN(true))  --<< 首先浏览器默认调用Number(true) 返回1，在进行isNaN(1) 结果为false
     console.log(isNaN(NaN))   --<< 首先浏览器默认调用Number(NaN)  返回NaN,在进行isNaN(1) 结果为true


 3)其他类型转为数字类型 Number()  parseInt() parseFloat()
    --->> Number() 强制将其他类型转为number类型
     规则如下：
       布尔值： true: 1 、 false: 0
       特殊值： *null : 0 、 undefined :NaN   、 NaN : NaN
       字符串： ""(空串):0  、数字串传入传出 前面0省略，小数点后面的0省略    只要串里面有一个不是数字字符，转换失败，返回NaN
       其他：   []: 0  、  {}: NaN  先调用toString()，在进行Number()转换

       console.log(Number(NaN)); NaN
       console.log(Number({}));  NaN
       console.log(Number([])); 0
       console.log(Number(12px)); NaN
       console.log(Number(null)); 0


   --->> parseInt(要转换的字符串[,n])
     转行机制：从左到右，依次转换，遇到不是有效的数字字符，停止转行，返回前面的
     n代表转换为n进制，前导空格和0省略，小数点为非数字字符
      ""(空串): NaN
      console.log(parseInt(12px13px));   12
      console.log(parseInt(''));         NaN
      console.log(parseInt('377',8));    255
      console.log(parseInt('02.560'));    2



   --->> parseFloat()
   转行机制：从左到右，依次转换，遇到不是有效的数字字符，停止转行，返回前面的
   支持指数形式的数据，
    console.log('123e-2'); 1.23


 4)小数点后面保留位数 toFixed(n) , [ 返回字符串 ]
   不足的话用零补齐
   (3.13).toFixed(3)   3.130

 5) 数字转为字符串 toString(n) 默认为十进制的数
    var n = 234;
    *document.body.style.background = '#'+n.toString(16);


总结：
  转换：Number()   parseInt()  parseFloat()  toString()
  保留小数点： toFixed()
  判断： isNaN()






