 ----------->>数组  <<--------------

1. length属性，可以读写属性,新增和删除数组元素，快速清空数组
2. 遍历数组方法总结
   var ary = [1,2,3,4,5];

   1) for循环
      for(var i=0;i<ary.length;i++) {
        console.log(ary[i]);
      }

      优化:直接求出循环长度，不用每次都计算了
       for(var i=0,len=ary.length;i<len;i++) {

          console.log(ary[i]);
       }

       倒着输出

       for(var i=ary.length-1,len=ary.length;i>=0;i--) {
         console.log(ary[i]);
       }


   2) 遍历对象法  for---in 循环
      for(var key in ary) {
        //但是不能遍历出length属性，因为他是不可枚举属性
        console.log(ary[key]);
      }


   3) 采用ES5提供的forEach方法遍历
       ary.forEach(function(value,index,self){
          console.log(value);
       });



   3.数组方法
     学习数组四个维度：
       1)方法的作用
       2)是否需要传入参数
       3)返回值是什么
       4)原理数组是否改变

    (1) 出进栈
      ---->> push(元素1，元素2,...)  将制定元素放到元素的末尾  返回增加后新数组的长度  原来数组改变   ===>>splice(ary.length,0,x)
      --->>  pop() 删除数组最后一个元素，返回删除的元素， 原理数组改变 ，没有参数 ===>> ary.length--; ===>> splice(ary.length-1,1);

      --->>unshift(元素1,元素2,...)  将制定元素放到元素的头部  返回增加后新数组的长度  原来数组改变  ===>> splice(0,0,x)
      --->>shift() 删除数组的第一个元素，返回删除的元素， 原理数组改变 ,没有参数 ==>> splice(0,1);


    (2) 数组增加删除修改方法 splice()

      删除：
       --->> splice() 直接删除原来数组，返回一个新数组，原理数组改变
       --->> splice(n) 从索引n开始，删除到数组末尾，删除的元素作为一个新数组返回，原理数组改
       --->> splice(n,m) 从索引n开始，删除m个元素   splice(n,1)  讲删除的一个元素作为一个新数组返回，原理数组改变


       新增/修改：
        --->> splice(n,m,x) 从索引n开始，删除m个元素，把x放在n的前面


    (3) 数组截取(原理数组不变)
       --->> slice() / slice(0) 克隆一份数组，原理数组不变
       --->> slice(n) 从索引n截取到末尾
       --->> slice(n,m) 从索引n截取到索引m，包含索引n,但不包含m

    (4) 数组合并
       --->> ary.concat(ary1,ary2) 将ary1,ary2放在ary后面，合并返回一个新数组，原理数组不变

    (5) 数组反转
       --->> ary.reverse()  倒过来返回一个新数组，原来数组不变，没有参数

    (6) 数组排序
       --->> sort(function(a,b){return a-b}); 从小到大 原理数组改变，返回拍完序的数组  参数为一个匿名函数
       --->> sort(function(a,b){return b-a}); 从大到小 原理数组改变，返回拍完序的数组  参数为一个匿名函数

    **ES5新增的方法
    (7) 查找指定的元素在数组中的位置
      --->> indexOf(查找的元素)
      --->> lastIndexOf(查找的元素)


    (8) 遍历数组
      --->> forEach(function(value,index,self){

      },context);


    (9) 过滤数组
      --->> filter(function(){});


    (10) 操作数组的每一个元素
      --->> map(function(){});


